"use strict";function _createForOfIteratorHelper(e,r){var t,n,a,o,i="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(i)return n=!(t=!0),{s:function(){i=i.call(e)},n:function(){var e=i.next();return t=e.done,e},e:function(e){n=!0,a=e},f:function(){try{t||null==i.return||i.return()}finally{if(n)throw a}}};if(Array.isArray(e)||(i=_unsupportedIterableToArray(e))||r&&e&&"number"==typeof e.length)return i&&(e=i),o=0,{s:r=function(){},n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:r};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,r){var t;if(e)return"string"==typeof e?_arrayLikeToArray(e,r):"Map"===(t="Object"===(t=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:t)||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(e,r):void 0}function _arrayLikeToArray(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}var _step2,burger=document.querySelector(".burger-btn"),navItems=document.querySelector(".nav_items"),navLinks=document.querySelectorAll(".nav-link"),navLink=document.querySelector(".nav-link"),showNav=function(){navItems.classList.toggle("show")},navActive=function(){var e,r=_createForOfIteratorHelper(navLinks);try{for(r.s();!(e=r.n()).done;)e.value.classList.remove("active")}catch(e){r.e(e)}finally{r.f()}navItems.onclick=function(e){e.target.classList.add("active"),navItems.classList.remove("active")}},_iterator2=(burger.addEventListener("click",showNav),navItems.addEventListener("click",showNav),_createForOfIteratorHelper(navLinks));try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var link=_step2.value;link.addEventListener("click",navActive)}}catch(e){_iterator2.e(e)}finally{_iterator2.f()}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiYnVyZ2VyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibmF2SXRlbXMiLCJuYXZMaW5rcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJuYXZMaW5rIiwic2hvd05hdiIsImNsYXNzTGlzdCIsInRvZ2dsZSIsIl9pdGVyYXRvciIsInMiLCJfc3RlcCIsIm4iLCJkb25lIiwiZSIsInRhcmdldCIsImFkZCIsInJlbW92ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfaXRlcmF0b3IyIiwiX3N0ZXAyIiwibGluayIsInZhbHVlIiwibmF2QWN0aXZlIl0sIm1hcHBpbmdzIjoib29DQUFBLEksT0FBTUEsT0FBU0MsU0FBU0MsY0FBYyxhQUF2QixFQUNUQyxTQUFXRixTQUFTQyxjQUFjLFlBQXZCLEVBQ1hFLFNBQVdILFNBQVNJLGlCQUFpQixXQUExQixFQUNYQyxRQUFVTCxTQUFTQyxjQUFjLFdBQXZCLEVBRVZLLFFBQVUsV0FDZkosU0FBU0ssVUFBVUMsT0FBTyxNQUExQixDQUNBLEVBTktOLFVBQVdGLFdBQVNDLElBQUFBLEVBQUFBLEVBQUFBLDJCQUNURCxRQURTQyxFQUFBQSxJQUMxQixJQUFBUSxFQUFBQyxFQUFBLEVBQUEsRUFBQUMsRUFBQUYsRUFBQUcsRUFBQSxHQUFBQyxNQUEwQlQsRUFBQUEsTUFDcEJDLFVBQVVMLE9BQVNDLFFBQXpCLENBRjBCQSxDQUFBQSxNQUFBQSxHQUFBQSxFQUFBQSxFQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxRQUFBQSxFQUFBQSxFQUFBQSxDQUFBQSxDQUkxQkMsU0FBTUksUUFBVSxTQUFBUSxHQUFoQkEsRUFBQUMsT0FBQVIsVUFBQVMsSUFBQSxRQUFBLEVBV0VkLFNBQVNLLFVBQVVVLE9BQU8sUUFBMUIsQ0FQRixDQVNDLEUsWUFFRGxCLE9BQU9tQixpQkFBaUIsUUFBU1osT0FBakMsRUFDQUosU0Fad0JnQixpQkFBQSxRQUFBWixPQVl4QixFLDJCQVg4QkgsUSxPQWE5QixJQUFBZ0IsV0FBQVQsRUFBQSxFQUFBLEVBQUFVLE9BQUFELFdBQUFQLEVBQUEsR0FBQUMsTUFiOEIsQ0FBQSxJQUFsQlEsS0FBa0JELE9BQUFFLE1BYzdCRCxLQWJDQSxpQkFBZUosUUFBT00sU0FhdkIsQ0FDQSIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGJ1cmdlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXJnZXItYnRuJylcclxuY29uc3QgbmF2SXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2X2l0ZW1zJylcclxuY29uc3QgbmF2TGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmF2LWxpbmsnKVxyXG5jb25zdCBuYXZMaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdi1saW5rJylcclxuXHJcbmNvbnN0IHNob3dOYXYgPSAoKSA9PiB7XHJcblx0bmF2SXRlbXMuY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdycpXHJcbn1cclxuXHJcbmNvbnN0IG5hdkFjdGl2ZSA9ICgpID0+IHtcclxuXHRmb3IgKGNvbnN0IGxpbmsgb2YgbmF2TGlua3MpIHtcclxuXHRcdGxpbmsuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcclxuXHR9XHJcblx0bmF2SXRlbXMub25jbGljayA9IGUgPT4ge1xyXG5cdFx0Ly8gY29uc29sZS5sb2coZS50YXJnZXQpXHJcblx0XHRlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxyXG5cdFx0bmF2SXRlbXMuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcclxuXHR9XHJcbn1cclxuXHJcbmJ1cmdlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNob3dOYXYpXHJcbm5hdkl0ZW1zLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2hvd05hdilcclxuXHJcbmZvciAoY29uc3QgbGluayBvZiBuYXZMaW5rcykge1xyXG5cdGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBuYXZBY3RpdmUpXHJcbn1cclxuLy8gbmF2TGlua3MuZm9yRWFjaChhZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG5hdkFjdGl2ZSkpXHJcblxyXG4vL3RyeWluZyBhZCBsaXN0ZW5lciBvbiBpbmRvdyB3aXRoIHNyb2xsXHJcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBjb25zb2xlLmxvZyhzY3JvbGxZKSlcclxuLy8gY29uc29sZS5sb2cod2luZG93LnNjcm9sbFkpXHJcbi8vIGNvbnNvbGUubG9nKHdpbmRvdylcclxuIl19
